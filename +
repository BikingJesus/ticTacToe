Game = torch.class ("TicTacToe")

function Game:__init(size)

    self.field = torch.zeros (size, size, size)
    self.size = size
    self.currentPlayer = 1
    self.count = {}
    self.count[-1] = 0
    self.count[ 1] = 0
end

function Game:getWinner ()
    local staight = torch.max {
        self.filed:sum(1):max(),
        self.filed:sum(2):max(),
        self.filed:sum(3):max()
    }
    if staight == self.size then
        return 1
    end
    staight = torch.min {
        self.filed:sum(1):min(),
        self.filed:sum(2):min(),
        self.filed:sum(3):min()
    }
    if staight == self.size then
        return 1
    end
end

function Game:plot ()
    require "gnuplot"
    local player = {}
    player[1] = {
        x= torch.Tensor (self.count[1]),
        y= torch.Tensor (self.count[1]),
        z= torch.Tensor (self.count[1])
    }
    player[-1] = {
        x= torch.Tensor (self.count[-1]),
        y= torch.Tensor (self.count[-1]),
        z= torch.Tensor (self.count[-1])
    }
    local size = self.size
    local count = {}
    count [-1] = 0
    count [ 1] = 0
    for x = 1, size do
        for y = 1, size do
            for z = 1, size do
                local content = self.field[x][y][z]
                if content ~= 0 then
                    player[content].x[count[content]] = x
                    player[content].y[count[content]] = y
                    player[content].z[count[content]] = z
                    count[content] = count[content] + 1
                end
            end
        end
    end

    gnuplot.scatter3(
    { "Player1", player1.x, player1.y, player1.z},
    { "Player2", player2.x, player2.y, player2.z})
end

function Game:action (x,y,z)
    if (self.field (x,y,z) == 0) then
        self.field[x][y][z] = self.currentPlayer
        self.count [currentPlayer]= self.count [currentPlayer] +1
        self.currentPlayer = self.currentPlayer * -1
    end
end
